#!/usr/bin/expect -f
#
# This Expect script was generated by autoexpect on Thu May 15 23:09:56 2025
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don


set timeout -1
spawn -noecho /tmp/vencord_install.sh
match_max 100000
expect -exact "Downloading Installer...\r
Running with sudo\r
Please touch the device.\r
\[?25l\[2K\r\[2mUse the arrow keys to navigate:\[0m \[2m‚Üì\[0m \[2m‚Üë\[0m \[2m‚Üí\[0m \[2m‚Üê\[0m \r
\[2K\r\[34m?\[0m What would you like to do? (Press Enter to confirm): \r
\[2K\r  \[1m‚ñ∏\[0m \[4mInstall Vencord\[0m\r
\[2K\r    Repair Vencord\r
\[2K\r    Uninstall Vencord\r
\[2K\r    Install OpenAsar\r
\[2K\r‚Üì   Uninstall OpenAsar\r
\[J\[2K\r "
send -- "\[B"
expect -exact "\[J\[2K\r\[1A\[1A\[1A\[1A\[1A\[1A\[1A\[2K\r\[2mUse the arrow keys to navigate:\[0m \[2m‚Üì\[0m \[2m‚Üë\[0m \[2m‚Üí\[0m \[2m‚Üê\[0m \[1B\[2K\r\[34m?\[0m What would you like to do? (Press Enter to confirm): \[1B\[2K\r    Install Vencord\[1B\[2K\r  \[1m‚ñ∏\[0m \[4mRepair Vencord\[0m\[1B\[2K\r    Uninstall Vencord\[1B\[2K\r    Install OpenAsar\[1B\[2K\r‚Üì   Uninstall OpenAsar\[1B \[J\[2K\r "
send -- "\r"
expect -exact "\[J\[2K\r \[J\[2K\r \[1A\[2K\r\[1A\[2K\r\[1A\[2K\r\[1A\[2K\r\[1A\[2K\r\[1A\[2K\r\[1A\[2K\r\[2K\r\[32m\[32m‚úî\[0m \[2mRepair Vencord\[0m\r
\[?25h\[J\[2K\r\[34mINFO \[0m Downloading latest Vencord files...\r
\[34mINFO \[0m Done!\r
\[?25l\[2K\r\[2mUse the arrow keys to navigate:\[0m \[2m‚Üì\[0m \[2m‚Üë\[0m \[2m‚Üí\[0m \[2m‚Üê\[0m \r
\[2K\r\[34m?\[0m Select Discord install to repair (Press Enter to confirm): \r
\[2K\r  \[1m‚ñ∏\[0m \[4mStable - /usr/lib64/discord \[PATCHED\]\[0m\r
\[2K\r    Custom Location\r
\[J\[2K\r "
send -- "\r"
expect eof
